---
import type { NavigationItem } from "@data/navigation";
import { navigationItems as defaultNavigationItems } from "@data/navigation";
import MenuToggleIcon from "@components/icons/MenuToggleIcon.astro";

// Props
interface Props {
  items?: NavigationItem[];
}

const { items = defaultNavigationItems } = Astro.props as Props;

// Path helpers
const normalizePath = (path?: string) => {
  if (!path) return "/";

  const trimmed = path.replace(/\/+$/, "");
  return trimmed === "" ? "/" : trimmed;
};

const currentPath = normalizePath(Astro.url.pathname);

const isLinkActive = (item: NavigationItem) => {
  const normalizedHref = normalizePath(item.href);

  if (currentPath === normalizedHref) return true;

  if (item.matchPrefix && normalizedHref !== "/") {
    return currentPath.startsWith(`${normalizedHref}/`);
  }

  return false;
};

// Styling helpers
const baseLinkClasses = "px-4 py-0.5 text-gray-500 focus:outline-hidden md:px-1 md:py-3 dark:text-neutral-400";
const activeLinkClasses = "text-primary font-extrabold dark:text-neutral-200";
const inactiveLinkClasses = "hover:text-gray-800 dark:hover:text-neutral-200";

const linkClasses = (isActive: boolean) => `${baseLinkClasses} ${isActive ? activeLinkClasses : inactiveLinkClasses}`;
---

<!-- ========== HEADER ========== -->
<header class="sticky inset-x-0 top-0 z-50 flex w-full flex-wrap text-sm md:flex-nowrap md:justify-start">
  <nav
    class="relative mx-2 mt-4 flex w-full max-w-2xl flex-wrap items-center justify-between rounded-[24px] border border-gray-200 bg-white ps-4 pe-4 sm:mx-auto md:flex-nowrap md:py-0 dark:border-neutral-700 dark:bg-neutral-900"
  >
    <div class="flex items-center">
      <!-- Logo -->
      <a
        class="inline-block flex-none rounded-md text-xl font-semibold focus:opacity-80 focus:outline-hidden"
        href={Astro.site}
      >
        <div class="text-gray-500">manuola.com</div>
      </a>
      <!-- End Logo -->
    </div>

    <div class="flex items-center gap-1 md:order-4 md:ms-4">
      <div class="md:hidden">
        <!-- Toggle Button -->
        <button
          type="button"
          class="flex size-9.5 items-center justify-center rounded-full border border-gray-200 text-gray-500 hover:bg-gray-200 focus:bg-gray-200 focus:outline-hidden dark:border-neutral-700 dark:text-neutral-400 dark:hover:bg-neutral-700 dark:focus:bg-neutral-700"
          id="mobile-nav-toggle"
          data-menu-toggle
          aria-expanded="false"
          aria-controls="mobile-nav-menu"
        >
          <MenuToggleIcon class="size-3.5 shrink-0" data-icon-open />
          <MenuToggleIcon class="hidden size-4 shrink-0" data-icon-close variant="close" />
        </button>
        <!-- End Toggle Button -->
      </div>
    </div>

    <div id="mobile-nav-menu" class="hidden grow basis-full overflow-hidden transition-all duration-300 md:block">
      <div
        class="mt-3 flex flex-col gap-2 py-2 md:mt-0 md:flex-row md:items-center md:justify-end md:gap-3 md:py-0 md:ps-7"
      >
        {
          items.map((item) => (
            <a href={item.href} class={linkClasses(isLinkActive(item))}>
              {item.label}
            </a>
          ))
        }
      </div>
    </div>
  </nav>
</header>
<!-- ========== END HEADER ========== -->

<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    const toggleButton = document.querySelector("[data-menu-toggle]");
    const menu = document.querySelector("#mobile-nav-menu");

    if (!toggleButton || !menu) return;

    const openIcon = toggleButton.querySelector("[data-icon-open]");
    const closeIcon = toggleButton.querySelector("[data-icon-close]");

    if (!openIcon || !closeIcon) return;

    const toggleIcons = (expanded) => {
      openIcon.classList.toggle("hidden", expanded);
      closeIcon.classList.toggle("hidden", !expanded);
    };

    toggleButton.addEventListener("click", () => {
      const isHidden = menu.classList.toggle("hidden");
      const isExpanded = !isHidden;

      toggleButton.setAttribute("aria-expanded", String(isExpanded));
      toggleIcons(isExpanded);
    });
  });
</script>
