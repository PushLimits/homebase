---
import type { TimelineEntry } from "@data/timeline";

interface Props {
  entries: TimelineEntry[];
}

const { entries } = Astro.props as Props;

const alignmentClass = (align: TimelineEntry["align"]) =>
  align === "start" ? "timeline-start md:text-end" : "timeline-end";
---

<ul class="timeline timeline-snap-icon max-md:timeline-compact timeline-vertical">
  {
    entries.map((item, index, arr) => {
      const hasLeadingRule = index > 0;
      const hasTrailingRule = index < arr.length - 1;

      return (
        <li>
          {hasLeadingRule && <hr />}
          <div class="timeline-middle">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="h-5 w-5">
              <path
                fill-rule="evenodd"
                d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z"
                clip-rule="evenodd"
              />
            </svg>
          </div>
          <div class={`${alignmentClass(item.align)} prose mb-10`}>
            <time class="font-mono italic">{item.year}</time>
            <div class="text-secondary text-2xl font-black">{item.title}</div>
            {item.subtitle && <div class="text-primary text-base italic">{item.subtitle}</div>}
            {item.description}
            {item.badges && item.badges.length > 0 && (
              <div>
                {item.badges.map((badge) => (
                  <div class="badge badge-info mx-0.5">{badge}</div>
                ))}
              </div>
            )}
          </div>
          {hasTrailingRule && <hr />}
        </li>
      );
    })
  }
</ul>
